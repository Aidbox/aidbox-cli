// Generated by CoffeeScript 1.9.3
(function() {
  var box, boxCurrent, boxHelp, boxList, boxNew, boxSwitch, cli, conf, config, helper, rest, searchBox;

  cli = require('cli');

  rest = require('restler');

  config = require('./conf');

  helper = require('./helper');

  conf = config.conf();

  boxList = function(cb) {
    return rest.get(conf.server + "/boxes", {
      username: conf.username,
      password: conf.password
    }).on('complete', function(data, response) {
      return helper.catchError(data, response, cb);
    }).on('error', helper.errHandler);
  };

  boxCurrent = function() {
    if (conf.box && conf.box.id && conf.box.secret) {
      return cli.ok("You current box [" + conf.box.id + "]");
    } else {
      cli.info("No current box");
      cli.info("For switch to box, try: $ aidbox box box_name");
      return cli.info("Or create new box: $ aidbox box new box_name");
    }
  };

  boxNew = function(name) {
    cli.info("Create new box [" + name + "]");
    return rest.post(conf.server + "/boxes", {
      username: conf.username,
      password: conf.password,
      data: JSON.stringify({
        id: name
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }).on('complete', function(data, response) {
      return helper.catchError(data, response, function(data) {
        if (data.status === 'error') {
          return cli.error(data.error);
        } else {
          cli.ok("Box [" + name + "] created");
          cli.ok("Current box switch to [" + name + "]");
          conf.box = data;
          return config.save(conf);
        }
      });
    }).on('error', helper.errHandler);
  };

  searchBox = function(boxes, key, val) {
    var i, j, len, v;
    for (i = j = 0, len = boxes.length; j < len; i = ++j) {
      v = boxes[i];
      if (v[key] === val) {
        return i;
      }
    }
    return -1;
  };

  boxSwitch = function(name) {
    if (!name) {
      return cli.error("No box selected");
    }
    return boxList(function(boxes) {
      var i;
      i = searchBox(boxes, 'id', name);
      if (i !== -1) {
        conf.box = boxes[i];
        config.save(conf);
        return cli.ok("Current box switch to [" + name + "]");
      } else {
        return cli.error("Box [" + name + "] not exist");
      }
    });
  };

  boxHelp = function() {
    return console.log("box                 -- Display current box\nbox help            -- Show help\nbox new <boxname>   -- Create new box with name <boxname>\nbox list            -- Show all available boxes\nbox use <boxname>   -- Switch current box to <boxname>\nbox destroy         -- Destroy current box [!not ready!]");
  };

  box = function(args, options) {
    if (args.length) {
      switch (args[0]) {
        case 'new':
          return boxNew(args[1]);
        case 'help':
          return boxHelp();
        case 'list':
          cli.info("Boxes list");
          return boxList(helper.boxTable);
        case 'use':
          return boxSwitch(args[1]);
        default:
          return boxHelp();
      }
    } else {
      return boxCurrent();
    }
  };

  module.exports = box;

}).call(this);
